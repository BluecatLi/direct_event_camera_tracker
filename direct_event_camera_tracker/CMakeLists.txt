cmake_minimum_required(VERSION 3.1)

project(direct_event_camera_tracker)

set(SOURCES
    main.cpp
    event_buffer.cpp
    utils.cpp
    #core/camera_image.cpp
    #core/image_data.cpp
    core/camera_intrinsics.cpp
    point.cpp
    gui/application.cpp
    gui/maingui.cpp
    gui/ImageLabel.cpp
    gui/errorplot.cpp
    gui/plotmatrix.cpp
    gui/StateTable.cpp
    gui/render_jacobi_tester.cpp
    gui/general_jacobi_tester.cpp
    gui/evo_map_publisher.cpp
    utils/ceres.cpp
    opengl/world_renderer.cpp
    opengl/framebuffer.cpp
    opengl/lib/model.cpp
    opengl/lib/mesh.cpp
    optimization/optimization.cpp
    optimization/opt_rerender.cpp
    optimization/opt_forward_warp.cpp
    optimization/opt_analytic.cpp
    optimization/opt_debug.cpp
    datasource.cpp
    pyramid.cpp
    keyframe.cpp
    )

set(UIS
    gui/maingui.ui
    gui/evo_map_publisher.ui
)

# add build directory to include path (required for autogenerated Qt UI headers)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_CXX_STANDARD 14)

# basically RelWithDebInfo
#set(CMAKE_CXX_FLAGS "-Wall -Wextra -g -O3 -Wno-sign-compare")

find_package(catkin REQUIRED COMPONENTS
    rosbag_storage
    message_generation
    dvs_msgs
    std_msgs
    geometry_msgs
    cv_bridge
    message_filters
    glog_catkin
    ceres_catkin
    assimp_catkin
    tf
)

# we don't need it as it only supports 2D conversions :(
#add_definitions(-DEIGEN_QT_SUPPORT)

find_package(OpenCV REQUIRED)
find_package(Eigen3 REQUIRED NO_MODULE)
find_package(yaml-cpp REQUIRED)
find_package(Boost REQUIRED)
#set(sophus_DIR "/usr/local/share/sophus/cmake/")
#find_package(sophus REQUIRED)
find_package(QCustomPlot REQUIRED)
find_package(OpenGL REQUIRED)
find_package(PCL 1.7 REQUIRED)

# automatically run moc when needed
set(CMAKE_AUTOMOC ON)
find_package(Qt5 COMPONENTS Core Widgets PrintSupport REQUIRED)

qt5_wrap_ui(UI_HEADERS ${UIS})

catkin_package(DEPENDS message_runtime dvs_msgs std_msgs) # sophus)

add_executable(${PROJECT_NAME} ${SOURCES} ${UI_HEADERS})

include_directories(
    "${PROJECT_SOURCE_DIR}/lib"
    ${OpenCV_INCLUDE_DIRS}
    ${EIGEN3_INCLUDE_DIRS}
    ${YAML_CPP_INCLUDE_DIRS}
    ${BOOST_INCLUDE_DIRS}
    ${QCustomPlot_INCLUDE_DIR}
    ${catkin_INCLUDE_DIRS}
    ${OPENGL_INCLUDE_DIR}
    ${PCL_INCLUDE_DIRS}
)

target_link_libraries(${PROJECT_NAME}
    ${OpenCV_LIBRARIES}
    Qt5::Widgets
    Qt5::PrintSupport
    ${YAML_CPP_LIBRARIES}
    ${BOOST_LIBRARIES}
    ${QCustomPlot_LIBRARIES}
    ${catkin_LIBRARIES}
    ${OPENGL_LIBRARIES}
    ${PCL_LIBRARIES}
)

#message(STATUS "catkin includes: ${catkin_INCLUDE_DIRS}")
#message(STATUS "project includes: ${PROJECT_SOURCE_DIR}")
